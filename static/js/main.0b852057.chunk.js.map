{"version":3,"sources":["reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","actions/index.js","pages/Login.js","pages/extraFunc.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","userReducer","state","action","type","value","currencies","expenses","editFunc","indexElement","map","element","index","id","filter","newObject","Object","assign","newState","console","log","walletReducer","expen","reducers","combineReducers","user","wallet","store","createStore","rootReducers","applyMiddleware","thunk","fetchApi","a","fetch","result","json","then","values","addExpenseToStore","dispatch","expense","exchangeRates","totalValue","editState","expenseNumber","Login","props","validateEmail","bind","password","itsOk","this","test","length","setState","addEmail","history","className","src","alt","htmlFor","data-testid","placeholder","onChange","target","onKeyUp","required","onClick","push","disabled","React","Component","userAction","actions","connect","e","obj","entries","find","excha","exchangeValue","ask","valueConvert","converted","parseInt","newAsk","Math","round","toFixed","Wallet","totalField","findObjectId","description","currency","method","tag","darkMode","reduce","next","rate","currencyName","object","discoverName","extraFunc","addExpense","delExpense","editExpense","icon","farLightbulb","fasLightbulb","size","Number","toLocaleString","keys","key","onMouseLeave","name","money","desc","curren","mediv","tg","faEdit","faTrash","addExpenseAction","delExpenseAction","editExpenseAction","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b852057.chunk.js","sourcesContent":["const INITIAL_STATE = { email: '' };\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'EMAIL':\n    return { email: action.value };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","const INITIAL_STATE = { currencies: [], expenses: [] };\nconst ADD_EXPENSE = 'ADD_EXPENSE';\nconst DEL_EXPENSE = 'DEL_EXPENSE';\nconst EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nconst editFunc = (state, { value }) => {\n  const arrayIndex = state.expenses.map((element, index) => {\n    if (element.id === value.id) return index;\n    return element.id === value.id;\n  });\n  const indexElement = arrayIndex.filter((element) => typeof element === ('number'));\n  const newObject = Object.assign(state.expenses[indexElement], value);\n  const newState = Object.assign(state.expenses, newObject);\n  console.log(newState);\n  return newState;\n};\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_EXPENSE:\n    return { currencies: [], expenses: [...state.expenses, action.value] };\n  case DEL_EXPENSE:\n    return { currencies: [],\n      expenses: [...state.expenses.filter((expen) => (expen.id !== action.value))] };\n  case EDIT_EXPENSE:\n    return { currencies: [],\n      expenses: [...editFunc(state, action)] };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nconst reducers = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers';\n\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nexport default store;\n","const USER = 'EMAIL';\nconst ADD_EXPENSE = 'ADD_EXPENSE';\nconst DEL_EXPENSE = 'DEL_EXPENSE';\nconst EDIT_EXPENSE = 'EDIT_EXPENSE';\nconst fetchApi = async () => {\n  const result = await fetch('https://economia.awesomeapi.com.br/json/all');\n  return result.json().then((values) => values);\n};\nconst userAction = (value) => ({ type: USER, value });\nconst addExpenseToStore = (value) => ({ type: ADD_EXPENSE, value });\nconst delExpenseAction = (value) => ({ type: DEL_EXPENSE, value });\nconst editExpenseAction = (value) => ({ type: EDIT_EXPENSE, value });\nconst addExpenseAction = (value) => {\n  const func = async (dispatch) => {\n    const expense = value;\n    expense.exchangeRates = await fetchApi();\n    delete expense.totalValue;\n    delete expense.editState;\n    delete expense.expenseNumber;\n    dispatch(addExpenseToStore(expense));\n  };\n  return func;\n};\nexport default { userAction, addExpenseAction, delExpenseAction, editExpenseAction };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from '../actions/index';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validateEmail = this.validateEmail.bind(this);\n    this.state = {\n      email: '',\n      password: '',\n      itsOk: true,\n    };\n  }\n\n  validateEmail() {\n    const re = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\n    const { email, password } = this.state;\n    const result = re.test(email);\n    const maxVal = 6;\n    if (result && password.length >= maxVal) return this.setState({ itsOk: false });\n    this.setState({ itsOk: true });\n  }\n\n  render() {\n    const { email, password, itsOk } = this.state;\n    const { addEmail, history } = this.props;\n    return (\n      <div className=\"flex bg-loginBackground bg-100% bg-center bg-no-repeat h-screen items-center justify-center\">\n        <div className=\" flex h-3/4 w-3/4 lg:h-auto lg:w-auto justify-center rounded-lg shadow-xl\">\n          <form className=\"flex w-auto h-auto m-12 items-center justify-center flex-col space-y-10\">\n          <img className=\"animate-pulse\" src=\"https://fontmeme.com/permalink/210119/644a7733ccebbad700b49720d0797475.png\" alt=\"pixel-fonts\" />\n            <label className=\"label-class-login\" htmlFor=\"email\">\n              Email\n              <input\n                className=\"input-class focus:outline-none focus:border-green-400 lg:w-72 lg:text-lg\"\n                type=\"email\"\n                data-testid=\"email-input\"\n                id=\"email\"\n                value={ email }\n                placeholder=\"Digite seu email\"\n                onChange={ ({ target }) => {\n                  this.setState({ email: target.value });\n                } }\n                onKeyUp={ this.validateEmail }\n                required\n              />\n            </label>\n            <label className=\"label-class-login\" htmlFor=\"password\">\n              Senha\n              <input\n                className=\"input-class focus:outline-none focus:border-green-400 lg:w-72 lg:text-lg\"\n                type=\"password\"\n                data-testid=\"password-input\"\n                id=\"password\"\n                value={ password }\n                placeholder=\"Digite sua senha\"\n                onChange={ async ({ target }) => {\n                  await this.setState({ password: target.value });\n                } }\n                onKeyUp={ this.validateEmail }\n                required\n              />\n            </label>\n            <button\n              className=\"disabled:opacity-50 disabled:hover:from-current login-button hover:from-pink-500 duration-500\"\n              type=\"button\"\n              onClick={ () => {\n                addEmail(email);\n                history.push('./carteira');\n              } }\n              disabled={ itsOk }\n            >\n              Entrar\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst { userAction } = actions;\nconst mapDispatchToProps = (dispatch) => ({\n  addEmail: (e) => dispatch(userAction(e)),\n});\n\nLogin.propTypes = {\n  addEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape.isRequired,\n};\nexport default connect(null, mapDispatchToProps)(Login);\n","const discoverName = (target, exchangeRates, values) => {\n  const object = Object.entries(exchangeRates).find(\n\n    (excha) => excha[0] === target,\n  );\n  const adjust = 100;\n  const newAdjust = 1000;\n  const fixedNumber = 3\n  const obj = object;\n  if (values) {\n    const exchangeValue = obj[1].ask;\n    const valueConvert = values.value * exchangeValue;\n    obj[1].converted = parseInt(valueConvert * adjust, 10) / adjust;\n  }\n  obj[1].newAsk = (Math.round(obj[1].ask * newAdjust) / newAdjust).toFixed(fixedNumber);\n  return obj[1];\n};\n\nconst returnParse = (value) => {\n  const adjust = 100;\n  return parseInt(value * adjust, 10) / adjust;\n};\nexport default { discoverName, returnParse };\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash, faLightbulb as fasLightbulb } from '@fortawesome/free-solid-svg-icons';\nimport { faLightbulb as farLightbulb } from '@fortawesome/free-regular-svg-icons';\nimport PropTypes from 'prop-types';\nimport actions from '../actions';\nimport extraFunc from './extraFunc';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchApi = this.fetchApi.bind(this);\n    this.totalField = this.totalField.bind(this);\n    this.findObjectId = this.findObjectId.bind(this);\n    this.state = {\n      exchangeRates: {},\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Cartão de crédito',\n      tag: 'Lazer',\n      totalValue: 0,\n      editState: false,\n      expenseNumber: 0,\n      darkMode: false,\n    };\n  }\n\n  componendividMount() {\n    this.fetchApi();\n  }\n\n  async fetchApi() {\n    const result = await fetch('https://economia.awesomeapi.com.br/json/all');\n    result.json().then((values) => this.setState({ exchangeRates: values }));\n  }\n\n  totalField() {\n    const { wallet } = this.props;\n    const { expenses } = wallet;\n    const result = expenses.reduce((element, next) => {\n      const { currency, exchangeRates: rate, value } = next;\n      const currencyName = currency;\n      const object = Object.entries(rate).find((excha) => excha[0] === currencyName);\n      const adjust = 10000;\n      const total = parseInt(element * adjust, 10) / adjust;\n      const exchange = parseInt(object[1].ask * adjust, 10) / adjust;\n      const values = parseInt(value * adjust, 10) / adjust;\n      return total + (exchange * values);\n    }, 0);\n    this.setState(({ totalValue: result }));\n  }\n\n  findObjectId(id) {\n    const { wallet } = this.props;\n    const { expenses } = wallet;\n    return expenses.find((element) => element.id === id);\n  }\n\n  render() {\n    const { discoverName } = extraFunc;\n    const { user, addExpense, wallet, delExpense, editExpense } = this.props;\n    const { expenses } = wallet;\n    const { email } = user;\n    const {\n      exchangeRates,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      totalValue,\n      editState,\n      expenseNumber,\n      id,\n      darkMode,\n    } = this.state;\n    return (\n      <div className={ `transition-all duration-500 max-h-full min-h-screen ${editState && 'bg-gray-100'} ${darkMode && 'bg-gray-600'}` }>\n        <div className=\"container flex w-screen items-center justify-center mx-auto flex-col\">\n          <header className={ `transition-all duration-500 flex flex-col rounded-xl w-11/12 bg-white items-center p-4 shadow-sm ${darkMode && 'bg-gray-700'}` }>\n            <div className=\"flex w-full flex-row justify-between items-center\">\n              <div />\n              <h1 className={ `font-bold ml-5 font-mono self-center ${darkMode ? 'text-gray-200' : 'text-gray-500'}` } data-testid=\"email-field\">Email do usuário</h1>\n              <FontAwesomeIcon\n                onClick={ () => {\n                  if (!darkMode) return this.setState({ darkMode: true });\n                  this.setState({ darkMode: false });\n                } }\n                className={ `duration-500 transform fill-current text-gray-200 hover:scale-125 transition-all mr-50 ${!darkMode && 'fill-current text-yellow-300 animate-pulse'}` }\n                icon={ darkMode ? farLightbulb : fasLightbulb }\n                size=\"2x\"\n              />\n            </div>\n            <h1 className={`font-bold ${darkMode ? 'text-gray-200' : 'text-gray-500'} font-mono` }>{email}</h1>\n            <p className={ `font-mono font-bold ${darkMode ? 'text-gray-200' : 'text-gray-500'}` } data-testid=\"total-field\">Valor total</p>\n            <div className=\"flex flex-row\">\n              <p className=\"font-mono font-bold text-green-400\">\n                R$:\n                {Number(parseInt(totalValue * 100, 10) / 100).toLocaleString('br')}\n              </p>\n              <p className=\"font-mono font-bold text-green-400\" data-testid=\"header-currency-field\">BRL</p>\n            </div>\n          </header>\n          <form\n            className={\n              `${darkMode ? 'bg-gray-700' : 'bg-white'} \n              flex flex-col lg:flex-row lg:flex-wrap my-4\n              items-center justify-center shadow-inner w-11/12\n              transition-all duration-500 rounded-xl\n              ${editState && 'edit-state'}`\n            }\n          >\n            <label className={ `${darkMode ? 'label-class-dark' : 'label-class text-gray-500'} wallet rounded-lg shadow-sm p-2 m-2` } htmlFor=\"expense\">\n              Despesa\n              <input\n                className={ `${darkMode ? 'input-class-dark' : 'input-class text-gray-700'} p-2 m-2 outline-none focus:border-green-400 sm:w-3/4 sm:text-lg` }\n                type=\"number\"\n                onChange={ ({ target }) => this.setState({ value: target.value }) }\n                id=\"expense\"\n                data-testid=\"value-input\"\n                value={ value }\n              />\n            </label>\n            <label className={ `${darkMode ? 'label-class-dark' : 'label-class text-gray-500'} wallet rounded-lg shadow-sm p-2 m-2` } htmlFor=\"expenseDescribe\">\n              Descrição\n              <textarea\n                placeholder=\"Descrição do gasto\"\n                className={ `outline-none ${darkMode ? 'input-class-dark' : 'input-class text-gray-700'} p-2 m-2  sm:w-3/4 sm:text-lg` }\n                type=\"text\"\n                onChange={ ({ target }) => this.setState({ description: target.value }) }\n                id=\"expenseDescribe\"\n                data-testid=\"description-input\"\n                value={ description }\n              />\n            </label>\n            <label className={ `${darkMode ? 'label-class-dark' : 'label-class text-gray-500'} wallet rounded-lg shadow-sm p-2 m-2` } htmlFor=\"currency\">\n              Câmbio\n              <select\n                className={ `${darkMode ? 'input-class-dark' : 'input-class text-gray-800 bg-white'} p-2 m-2 outline-none focus:border-green-400 sm:w-3/4 sm:text-sm` }\n                onChange={ ({ target }) => this.setState({ currency: target.value }) }\n                value={ currency }\n                data-testid=\"currency-input\"\n                id=\"currency\"\n              >\n                {Object.keys(exchangeRates).map((element) => {\n                  if (element !== 'USDT') {\n                    return (\n                      <option\n                        className=\"text-center rounded-lg\"\n                        key={ element }\n                        data-testid={ element }\n                        value={ element }\n                      >\n                        {element}\n                      </option>);\n                  }\n                  return 'xuxu';\n                })}\n              </select>\n            </label> \n            <label className={ `${darkMode ? 'label-class-dark' : 'label-class text-gray-500'} wallet rounded-lg shadow-sm p-2 m-2` } htmlFor=\"paymentForm\">\n              Forma de pagamento\n              <select\n                className={ `${darkMode ? 'input-class-dark' : 'input-class text-gray-800 bg-white'} p-2 m-2 outline-none focus:border-green-400 sm:w-3/4 sm:text-sm` }\n                type=\"text\"\n                id=\"paymentForm\"\n                data-testid=\"method-input\"\n                onChange={ ({ target }) => this.setState({ method: target.value }) }\n                value={ method }\n              >\n                <option>Dinheiro</option>\n                <option>Cartão de crédito</option>\n                <option>Cartão de débito</option>\n              </select>\n            </label>\n            <label className={ `${darkMode ? 'label-class-dark' : 'label-class text-gray-500'} wallet rounded-lg shadow-sm p-2 m-2` } htmlFor=\"type\">\n              Tipo do gasto\n              <select\n                className={ `${darkMode ? 'input-class-dark' : 'input-class text-gray-800 bg-white'} p-2 m-2 outline-none focus:border-green-400 sm:w-3/4 sm:text-sm` }\n                type=\"text\"\n                id=\"type\"\n                data-testid=\"tag-input\"\n                onChange={ async ({ target }) => {\n                  this.setState({ tag: target.value });\n                } }\n                value={ tag }\n                onMouseLeave={ this.fetchApi }\n              >\n                <option>Alimentação</option>\n                <option>Lazer</option>\n                <option>Trabalho</option>\n                <option>Transporte</option>\n                <option>Saúde</option>\n              </select>\n            </label>\n            <button\n              className={ `expense-button ${editState && 'edit-moment'}` }\n              type=\"button\"\n              onClick={ async () => {\n                if (editState) {\n                  await editExpense(this.state);\n                  this.totalField();\n                  this.setState(({ id: expenseNumber, editState: false, description: '', value: 0 }));\n                } else {\n                  await addExpense(this.state);\n                  await this.setState({\n                    description: '',\n                    value: 0,\n                    expenseNumber: expenseNumber + 1,\n                    id: id + 1 });\n                  this.totalField();\n                }\n              } }\n            >\n              {editState ? 'Editar Despesa' : 'Adicionar Despesa'}\n            </button>\n          </form>\n        </div>\n        {!editState && <div className=\"flex w-screen\">\n          {/* <thead>\n            <tr className=\"flex bg-white flex-col items-center justify-center p-4 m-4 shadow-inner\">\n              <th className=\"text-yellow-300 p-4 font-bold\">Descrição</th>\n              <th className=\"text-blue-500 p-4 font-bold\">Tag</th>\n              <th className=\"text-purple-600 p-4 font-bold\">Método de pagamento</th>\n              <th className=\"text-green-400 p-4 font-bold\">Valor</th>\n              <th className=\"text-blue-400 p-4 font-bold\">Moeda</th>\n              <th className=\"text-pink-500 p-4 font-bold\">Câmbio utilizado</th>\n              <th className=\"text-green-900 p-4 font-bold\">Valor convertido</th>\n              <th className=\"text-gray-600 p-4 font-bold\">Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead> */}\n          <div className=\"flex w-screen items-center justify-center content-center flex-col sm:flex-wrap sm:flex-row\">\n            {expenses.map((values) => (\n              <div className={ `${darkMode ? 'card-container-dark' : 'card-container'}` } key={ values.id }>\n                <div className=\"flex w-11/12 flex-row justify-center items-center\">\n                  <div className={ `${darkMode ? 'description-class-dark' : 'description-class'}` } key=\"description\">{ values.description }</div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Tipo do gasto</div>\n                  <div className={ `${darkMode ? 'card-value-dark' : 'card-value'}` } key=\"tag\">{ values.tag}</div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title break-words'}` }>Forma de pagamento</div>\n                  <div className={ `${darkMode ? 'card-value-dark' : 'card-value'}` } key=\"method\">{ values.method}</div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Despesa</div>\n                  <div\n                    className={ `${darkMode ? 'card-value-dark text-green-400' : 'card-value text-green-400'}` }\n                    key=\"value\"\n                  >\n                    {Number(values.value).toLocaleString('br')}\n                  </div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Câmbio</div>\n                  <div className={ `${darkMode ? 'card-value-dark' : 'card-value'}` } key=\"convert\">\n                    {discoverName(values.currency, values.exchangeRates).name}\n                  </div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Câmbio utilizado</div>\n                  <div className={ `${darkMode ? 'card-value-dark' : 'card-value'}` } key=\"current\">\n                    {discoverName(values.currency, values.exchangeRates).newAsk}\n                  </div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Valor convertido</div>\n                  <div\n                    className={ `${darkMode ? 'card-value-dark text-green-400' : 'card-value text-green-400'}` }\n                    key=\"convertV\"\n                  >\n                    R$:\n                    {Number(discoverName(values.currency, values.exchangeRates, values).converted).toLocaleString('br')}\n                  </div>\n                </div>\n                <div className=\"card-div\">\n                  <div className={ `${darkMode ? 'card-title-dark' : 'card-title'}` }>Câmbio convertido</div>\n                  <div className={ `${darkMode ? 'card-value-dark' : 'card-value'}` } key=\"currency\">Real</div>\n                </div>\n                <div className=\"flex w-auto h-auto\">\n                  <FontAwesomeIcon\n                    className={ `${darkMode ? 'edit-icon-dark' : 'edit-icon'}` }\n                    size=\"2x\"\n                    onClick={ () => {\n                      const { value: money, description: desc, currency: curren, method: mediv, tag: tg } = this.findObjectId(values.id);\n                      this.setState({ editState: true, id: values.id, value: money, description: desc, currency: curren, method: mediv, tag: tg });\n                    } }\n                    icon={ faEdit }\n                  />\n                  <FontAwesomeIcon\n                    className={ `${darkMode ? 'delete-icon-dark' : 'delete-icon'}` }\n                    size=\"2x\"\n                    onClick={ async () => {\n                      this.setState({ editState: false });\n                      await delExpense(values.id);\n                      this.totalField();\n                    } }\n                    icon={ faTrash }\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div> }\n      </div>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n});\nconst { addExpenseAction, delExpenseAction, editExpenseAction } = actions;\nconst mapDispatchToProps = (dispatch) => ({\n  addExpense: (e) => dispatch(addExpenseAction(e)),\n  delExpense: (e) => dispatch(delExpenseAction(e)),\n  editExpense: (e) => dispatch(editExpenseAction(e)),\n});\n\nWallet.propTypes = {\n  user: PropTypes.objectOf(PropTypes.string).isRequired,\n  wallet: PropTypes.shape.isRequired,\n  addExpense: PropTypes.func.isRequired,\n  delExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './index.css';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/walletredux/carteira\" component={ Wallet } />\n        <Route path=\"/walletredux/login\" component={ Login } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}